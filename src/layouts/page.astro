---
import 'styles/base.sass';

import type { SitePage } from 'sitemap/types';
import CssVarsTest from 'components/common/scripts/css-vars-test.astro';
import WindowAppReady from 'components/common/scripts/window.appReady.astro';
import NotSupported from 'components/common/scripts/not-supported.astro';
import PageMeta from "./meta.astro";
import Fonts from "./fonts.astro";
import Header from 'components/common/header/view.astro';
import Footer from 'components/common/footer/view.astro';
import MobileMenu from 'components/common/mobileMenu/view.astro';
import Preloader from 'components/common/preloader/view.astro';

import { NoScriptId } from 'sitemap/pages';
import { type Locales  } from 'sitemap/copyright';
import { ViewTransitions } from 'astro:transitions';

type Props = SitePage & {
	locale: Locales,
	isActivePreloader?: boolean,
	isActiveHeader?: boolean,
	isActiveFooter?: boolean,
	isActiveMobileMenu?: boolean,
    noSmoothWrapper?: boolean,
};

// default values
const {
    id,
    locale,
    title = 'Title',
    description = 'Description',
    href,
    image,
    noIndex = false,
    disableScripts = false,
    isActiveFooter = true,
    isActiveMobileMenu = true,
    isActiveHeader = true,
    isActivePreloader = true,
    noSmoothWrapper = false,
} = Astro.props;

const bodyClass = `locale-${locale}`;

const anim = {
  old: {
    name: '-',
    duration: '1s',
    easing: 'linear',
    fillMode: 'forwards',
  },
  new: {
    name: 'flyIn',
    duration: '1s',
    easing: 'linear',
    fillMode: 'backwards',
  }
};

const myFade = {
  forwards: anim,
  backwards: anim,
};

---

<!DOCTYPE html>
<html lang={locale}>
    <head>
		<ViewTransitions />
        <PageMeta
			locale={locale}
			href={href}
			title={title}
			description={description}
			image={image}
			noIndex={noIndex}
		/>

        <Fonts />

        {(id != NoScriptId)
            ? (
                <noscript>
                    <meta http-equiv="refresh" content="0;url=/no-script.html"/>
                </noscript>
            )
            : <script> window.location.href = '/' </script>
        }

		{(disableScripts !== 'force') && <WindowAppReady />}
    </head>

    <body class={`${bodyClass}`} transition:animate={myFade}>
        {isActiveHeader && <Header locale={locale}/>}


		<main id={`${id}`} data-page-id={`${id}`}>
			<slot />
		</main>

		{ noSmoothWrapper && <script>window.DISABLE_SMOOTHER_WRAPPER = 1</script> }

        {isActiveFooter && <Footer locale={locale}/>}
        {disableScripts !== 'force' &&
			<CssVarsTest />
			<NotSupported criticalChecks={[ 'supportsCssVars' ]} />
        }
    </body>
    {isActiveMobileMenu && <MobileMenu locale={locale}/>}
    {isActivePreloader && <Preloader />}
</html>


<script>
	import { oneTimeSubscription } from '@zajno/common/observing/event';
	import { setTimeoutAsync, timeoutPromise } from '@zajno/common/async/timeout';
	import { PreloadEvent } from 'scripts/modules/pageEvents';
	import { Breakpoints } from 'scripts/appBreakpoints';
	import { CommonComponents } from 'components/common/commonTypes';
	import { Preloader } from 'components/common/preloader/script';
	import { ImageLazyLoadComponent } from 'src/scripts/components/lazy/lazyImageLoadComponent';
	import { LazyScriptComponent } from 'src/scripts/components/lazy/lazyScriptComponent';
	import { LazyClasses } from 'src/scripts/components/lazy/lazyLoadComponent';
	import { ParallelQueue } from '@zajno/common/structures/queue/parallel';
	import { ScrollTrigger, isTouchDevice } from 'scripts/lib/gsap/scrollTrigger';
	import { getLenis } from 'scripts/modules/setupLenis';

	const LOG_ENABLED = true;

	const MAX_WAIT_TIME = 10_000;
	const MIN_WAIT_TIME = 1_000;
	const TARGET_LAZY_PRIORITY = 10;
	const TARGET_LAZY_PRIORITY_MOBILE = 20;

	let lazyQueue: ParallelQueue = new ParallelQueue;

	// set link to queue for video component
	(window as any).lazyQueue = lazyQueue;

	// initial
	ImageLazyLoadComponent.RegisterAll(lazyQueue);
	LazyScriptComponent.RegisterAll(lazyQueue);

	// on change page with view transitions
	document.addEventListener('astro:after-swap', () => {
		lazyQueue = new ParallelQueue();

		// set link to queue for video component
		(window as any).lazyQueue = lazyQueue;

		ImageLazyLoadComponent.RegisterAll(lazyQueue);
		LazyScriptComponent.RegisterAll(lazyQueue);

		const triggers = ScrollTrigger.getAll();
		const smoother = getLenis();

		console.log(triggers, smoother);
		triggers.forEach(st => st.kill());
		smoother?.destroy();
	})

	document.addEventListener('astro:page-load', async () => {
		const mainElement = document.querySelector('main');

		lazyQueue.afterPriorityRun.on(p => {
			if (mainElement) {
				mainElement.classList.add(LazyClasses.mainLoadedTemplate(p));
			}
		});

		if (LOG_ENABLED) {
			lazyQueue.withLogger('Lazy');
		}

		lazyQueue.start();

		(async () => {
        	const el = document.getElementById(CommonComponents.Preloader);

			if (!el) {
        	    PreloadEvent.trigger();
        return;
        	}

        	const preloader = await new Preloader({ el }).setup();

        	const targetLazyPriority = Breakpoints.isDesktop
        	    ? TARGET_LAZY_PRIORITY
        	    : TARGET_LAZY_PRIORITY_MOBILE;
        	const nextTargetLazyPriority = targetLazyPriority + 1;

        	// add dummy lazy task for target priority just to 100% get event for it
        	lazyQueue.enqueue(() => Promise.resolve(), targetLazyPriority);

        	// pause all items after target priority preloader exit smoother
        	lazyQueue.enqueue(() => setTimeoutAsync(2000), nextTargetLazyPriority);

        	timeoutPromise(oneTimeSubscription(lazyQueue.afterPriorityRun, p => p >= targetLazyPriority), MAX_WAIT_TIME, MIN_WAIT_TIME)
        	    .then(async ({ timedOut, elapsed }) => {

        	        if (timedOut) {
        	            // eslint-disable-next-line no-console
        	            console.warn('Preloader timed out, elapsed =', elapsed);
        	        }

        	        await preloader.hide();
        	        PreloadEvent.trigger();
        	});
    	})();

		await setTimeoutAsync(2000);

		if (!(window as any).DISABLE_SMOOTHER_WRAPPER) {
			const lenis = getLenis();
		}
		ScrollTrigger.refresh();
	})
</script>
